/* Comments are generated by ChatGPT for future references */

import React, { useEffect, useRef } from "react"; // Import necessary React components and hooks
import styles from './Background.module.css'; // Import the CSS module


const Background: React.FC = () => {
    // Define an array of emojis
    const emojiArray = ['🍔', '🍕', '🌮', '🍦', '🍩', '🍪', '🍭', '🥤', '🧁'];

    // Create a reference to a DOM element (a div in this case)
    const containerRef = useRef<HTMLDivElement>(null);

    // This useEffect hook runs after the component renders
    useEffect(()=>{
        // Get the current value of the containerRef, which should be the div element
        const container = containerRef.current;
        
        if (container){
            // Define the width and height of each emoji
            const emojiWidth = 40;
            const emojiHeight = 40;

            // Get the width and height of the browser window
            const windowWidth = window.innerWidth;
            const windowHeight = window.innerHeight;

            // Calculate how many emojis can fit in each row and column
            const emojisPerRow = Math.ceil(windowWidth / emojiWidth);
            const emojisPerColumn = Math.ceil(windowHeight / emojiHeight);

            // Calculate the total number of emojis to be displayed
            const totalEmojis = emojisPerColumn * emojisPerRow;

            // Loop to create and append emojis to the container
            for(let i=0; i<totalEmojis; i++){
                const emoji = document.createElement('span');
                
                // Randomly select an emoji from the array
                emoji.textContent = emojiArray[Math.floor(Math.random() * emojiArray.length)];
                
                // Append the emoji to the container
                container.appendChild(emoji);
            }
        }
    }, []); // This hook runs only once after the component is mounted

    // Render a div element with a reference to the containerRef and a specified CSS class
    return<>
            <div ref={containerRef} className={styles.background}></div>
        </>;
}

export default Background; // Export the Background component
